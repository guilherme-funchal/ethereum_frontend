import './App.css';
import { ethers } from 'ethers';
import { useState, useEffect } from 'react';
import api from './api';


function App() {
  
  
   useEffect(() => {
    const address = localStorage.getItem('wallet');
    setWallet(address);  
    const saldo = doSaldo();

    saldo
    .then((value) => {
      setBalance(value);
    })
    .catch((err) => {
      console.log(err); 
    });
    
    const resultado = doTransacoes();

    var promise = Promise.resolve(resultado);
    
    promise.then(function(val) {
      setTransactions(val);
    });
    
    // resultado
    // .then((value) => {
    //   // setTransactions(value);
    //   console.log('resultado :' + value);
    // })
    // .catch((err) => {
    //   console.log(err); 
    // });  
    
    

    if (address) doSignIn();


  }, [])
  
  const [error, setError] = useState('');
  const [wallet, setWallet] = useState('');
  const [transactions, setTransactions] = useState(['']);
  const [balance, setBalance] = useState('');
  
  // async function doOwner(){
  //   const response = api.get('dono');
  //   var dono = (await response).data
  //   console.log((await response).data);
  //   alert(dono);
  // }

  async function doSaldo(){
    var conta = localStorage.getItem('wallet');
    const response = api.get('saldo?conta=' + conta);
    var saldo = (await response).data;
    return saldo;
  }

  async function doTransacoes(){
    const response = api.get('transacoes');
    var transactions_result = (await response).data;
    // console.log(transactions_result);
    return transactions_result;
  }

  async function doSignIn() {
    // alert('Logado');
  // window.location.reload(false);
  }
  
  function refreshPage() {
    window.location.reload(false);
  }

  async function doLogout(){
    localStorage.removeItem('token');
    localStorage.removeItem('wallet');
    setWallet('');
    setError('');
    setTransactions('');
    setBalance('');
  }
  
  async function doSignUp(){
    setError('');
  
    if (!window.ethereum) return setError(`No MetaMask found!`);
  
    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const accounts = await provider.send("eth_requestAccounts", []);
      if (!accounts || !accounts.length) return setError('Wallet not found/allowed!');
      localStorage.setItem('wallet', accounts[0]);
      window.location.reload(false);
    }catch(err){
      setError(err.message);
    }
  }

  return (
    <div className="App">
    <header className="App-header">
      <h6>Login</h6>
      <div>
        {
          !wallet
            ? (
              <>
                <button onClick={doSignUp}>
                 Login
                 </button>
              </>
            )
            : (
              <>
                <p>
                  Wallet: {wallet}
                </p>
                <p>
                  Saldo: {balance}
                </p>
                <button onClick={doLogout}>
                  Logout
                </button>
                {/* <button onClick={doOwner}>
                  Propriet√°rio {trans}
                </button> */}
                {/* <button onClick={doSignUp}>
                 Login
                </button> */}
                <button onClick={refreshPage}>
                 Atualizar
                </button>
                <p>
                  {console.log(transactions)}
                  {transactions.map(obj => {
                    return (
                      <div key={obj.blockHash}>
                        <h6>blockHash : {obj.blockHash}</h6>
                        <h6>Event : {obj.event}</h6>
                        <h6>Bloco : {obj.blockNumber}</h6>
                        {/* <h6>From : {obj.returnValues.from}</h6>
                        <h6>To : {obj.returnValues.to}</h6> */}
                      </div>
                    );
                  })}
                </p>
              </>
            )
        }
        {
            error ? <p>{error}</p> : <></>
        }
      </div>
    </header>
  </div>
  );
}

export default App;
